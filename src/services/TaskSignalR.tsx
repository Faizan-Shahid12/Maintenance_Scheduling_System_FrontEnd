import { connect, useDispatch } from "react-redux";
import { type MyDispatch } from "../Redux/Store"
import * as signalR from "@microsoft/signalr";
import { AddTaskToMain, AddTaskToTech, ChangeTaskStatus, EditTaskinTechTask, RemoveTaskFromTech } from "../Redux/Slicers/TaskSlicer";
import type { Task } from "../Models/TaskModels/TaskModel";

let connection: signalR.HubConnection | null = null;


export const StartConnection = async () =>
{
    if(!connection)
    {
        connection = new signalR.HubConnectionBuilder()
        .withUrl(import.meta.env.VITE_TASKHUB_URL, {accessTokenFactory: () => localStorage.getItem("AccessToken") || ""})
        .withAutomaticReconnect()
        .build();
        try 
        {
            await connection.start();
            console.log("SignalR Connected");
        } 
        catch (err)
        {
        console.error("SignalR Connection Error", err);
        }
    }

  return connection;
}

let handlersRegistered : boolean = false;

export const RegisterTaskHandlers = (dispatch: MyDispatch) =>
{
    if(!connection || handlersRegistered) return;

    connection?.on("RecieveAutoGeneratedTaskFromServer", (taskdto : Task) =>
    {

        console.log("HELLO AUTOGENERATED TASK")
        dispatch(AddTaskToTech(taskdto));
        dispatch(AddTaskToMain(taskdto));
    })
    
    connection?.on("RecieveTaskFromServer", (taskdto : Task) => 
    {
    
        dispatch(AddTaskToTech(taskdto));
    })

    connection?.on("RecieveUpdatedAssignTaskFromServer", (taskdto : Task) => 
    {
    
        dispatch(AddTaskToTech(taskdto));
    })

    connection?.on("RecieveRemoveAssignTaskFromServer", (taskdto : Task) => 
    {
    
        dispatch(RemoveTaskFromTech(taskdto));
    })

    connection?.on("RecieveChangeTaskStatusFromServer", (taskdto: Task) =>
    {
    
        dispatch(ChangeTaskStatus(taskdto));

    });

    connection.on("RecieveEditTaskFromServer", (taskdto: Task) =>
    {
    
        dispatch(EditTaskinTechTask(taskdto));
    })

    connection.on("RecieveRemoveTaskIdFromServer", (taskdto : Task) => 
    {
    
        dispatch(RemoveTaskFromTech(taskdto))
    })

    handlersRegistered = true;
}